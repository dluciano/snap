{"version":3,"sources":["MainGameManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"..\\..\\..\\..\\assets\\Script","sourcesContent":["\"use strict\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\nimport ConnectionManager from \"./ConnectionManager\";\r\nimport SnapGame from \"./SnapGame\";\r\n\r\n@ccclass\r\nexport default class MainGameManager extends cc.Component {\r\n    private connection: ConnectionManager;\r\n    private game: SnapGame;\r\n\r\n    @property(cc.Node)\r\n    snapGameNode: cc.Node = null;\r\n\r\n    @property(cc.Prefab)\r\n    cardPrefab: cc.Prefab = null;\r\n\r\n    @property()\r\n    menuSceneName: string = \"\";\r\n\r\n    @property(cc.Node)\r\n    cardContainer: cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    yourCards: cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    popCardTouchNode: cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    snapTouchNode: cc.Node = null;\r\n\r\n    @property(cc.Label)\r\n    currentPlayerLabel: cc.Label = null;\r\n\r\n    @property(cc.SpriteAtlas)\r\n    cardAtlas: cc.SpriteAtlas = null;\r\n\r\n    @property(cc.SpriteFrame)\r\n    cardBackPart: cc.SpriteFrame = null;\r\n\r\n    @property(cc.Node)\r\n    playerNamesContainer: cc.Node = null;\r\n\r\n    rotateDirection: number = 1;\r\n\r\n    onLoad(): void {\r\n        this.connection = ConnectionManager.getInstance();\r\n        cc.systemEvent\r\n            .on(ConnectionManager.ON_POP_CARD_MESSAGE, this.cardPop, this);\r\n        cc.systemEvent\r\n            .on(ConnectionManager.ON_SNAP_MESSAGE, this.onSnap, this);\r\n        this.snapTouchNode.on(\"mousedown\", this.snap, this);\r\n        this.popCardTouchNode.on(\"mousedown\", this.popCard, this);\r\n        this.game = this.snapGameNode.getComponent(SnapGame);\r\n    }\r\n\r\n    onDestroy(): void {\r\n        cc.systemEvent\r\n            .off(ConnectionManager.ON_POP_CARD_MESSAGE, this.cardPop, this);\r\n        cc.systemEvent\r\n            .on(ConnectionManager.ON_SNAP_MESSAGE, this.onSnap, this);\r\n    }\r\n\r\n    private cardPop(e: cc.Event.EventCustom): any {\r\n        const data: any = e.getUserData();\r\n        this.game.currentPlayer = data.currentPlayer;\r\n        const card: any = data.card;\r\n\r\n        cc.log(`You are: ${this.connection.player.username} and the current player is: ${this.game.currentPlayer}`);\r\n        cc.log(`card pop! type: ${card.type} value: ${card.value}`);\r\n\r\n        this.renderPopCardInCentralPile(card.type, card.value);\r\n        this.currentPlayerLabel.string = this.game.currentPlayer;\r\n        if (data.popBy === this.connection.player.username && this.yourCards.children.length > 0) {\r\n            this.yourCards.removeChild(this.yourCards.children[0], true);\r\n        }\r\n    }\r\n\r\n    renderPopCardInCentralPile(type: number, value: number): void {\r\n        const cardNode: cc.Node = cc.instantiate(this.cardPrefab);\r\n        const cardSprite: cc.Sprite = cardNode.getComponent(cc.Sprite);\r\n        const atlasSliceName: string = `slice_${type + 1}_${value}`;\r\n        cardNode.angle = this.rotateDirection * Math.random() * 30;\r\n        cardSprite.spriteFrame = this.cardAtlas.getSpriteFrame(atlasSliceName);\r\n        this.cardContainer.addChild(cardNode);\r\n        this.rotateDirection = this.rotateDirection >= 1 ? -1 : 1;\r\n    }\r\n\r\n    snap(): void {\r\n        this.connection.snap(this.game.gameId);\r\n    }\r\n\r\n    onSnap(e: cc.Event.EventCustom): void {\r\n        const data: any = e.getUserData();\r\n        if (data.username === this.connection.player.username) {\r\n            cc.log(`YOU ${data.username} HAVE SNAPPED`);\r\n            this.yourCards.removeAllChildren();\r\n            for (let i: number = 0; i < data.playerCardsCount; i++) {\r\n                const backCard: cc.Node = cc.instantiate(this.cardPrefab);\r\n                backCard.setPosition(new cc.Vec2(i * 0.01, i * 0.01));\r\n                this.yourCards.addChild(backCard);\r\n            }\r\n        } else {\r\n            cc.log(`YEEKS, player ${data.username} hava snapped :(`);\r\n        }\r\n        this.cardContainer.removeAllChildren();\r\n    }\r\n\r\n    loadData(): void {\r\n        cc.log(`You are: ${this.connection.player.username} and the current player is: ${this.game.currentPlayer}`);\r\n        this.currentPlayerLabel.string = this.game.currentPlayer;\r\n        const myPlayerData: any = this.game.playerData.filter(p => p.username === this.connection.player.username)[0];\r\n\r\n        for (let i: number = 0; i < myPlayerData.playersCardsCount; i++) {\r\n            const backCard: cc.Node = cc.instantiate(this.cardPrefab);\r\n            backCard.setPosition(new cc.Vec2(i * 0.25, i * 0.25));\r\n            this.yourCards.addChild(backCard);\r\n        }\r\n\r\n        this.game.playerData.map(pd => {\r\n            const node: cc.Node = new cc.Node();\r\n            const label: cc.Label = node.addComponent(cc.Label);\r\n            label.string = pd.username;\r\n            label.fontSize = 24;\r\n            label.lineHeight = 24;\r\n            return node;\r\n        }).forEach((l: cc.Node) => this.playerNamesContainer.addChild(l));\r\n    }\r\n\r\n    popCard(): void {\r\n        this.connection.popCard(this.game.gameId);\r\n    }\r\n\r\n    exit(): void {\r\n        cc.director.loadScene(this.menuSceneName);\r\n    }\r\n}\r\n"]}