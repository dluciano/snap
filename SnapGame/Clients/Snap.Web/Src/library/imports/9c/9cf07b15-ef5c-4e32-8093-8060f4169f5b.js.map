{"version":3,"sources":["..\\..\\..\\..\\assets\\Script/assets\\Script\\ConnectionManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"..\\..\\..\\..\\assets\\Script","sourcesContent":["import * as signalR from \"@aspnet/signalr\";\r\nimport { JSO, Popup, Fetcher } from \"jso\";\r\n\r\nexport class ConnectionManager {\r\n    private static readonly conn: ConnectionManager = new ConnectionManager();\r\n    public static getInstance(): ConnectionManager {\r\n        return ConnectionManager.conn;\r\n    }\r\n    public static readonly ON_CHALLENGING: string = \"onChallenging\";\r\n    public static readonly ON_PLAYER_LOGIN_EVENT: string = \"onPlayerLoginEvent\";\r\n    public static readonly ON_PLAYER_LOGOUT: string = \"onPlayerLogoutEvent\";\r\n\r\n    public static readonly ON_CONNECTING: string = \"onConnecting\";\r\n    public static readonly ON_CONNECTION_CLOSED: string = \"onConnectionClosed\";\r\n    public static readonly ON_CONNECTED: string = \"onConnected\";\r\n\r\n    public static readonly CREATE_ROOM: string = \"CreateRoom\";\r\n    public static readonly JOIN_GAME_MESSAGE: string = \"JoinGame\";\r\n    public static readonly START_GAME_MESSAGE: string = \"StartGame\";\r\n    public static readonly POP_CARD_MESSAGE: string = \"PopCard\";\r\n    public static readonly SNAP_MESSAGE: string = \"Snap\";\r\n\r\n    public static readonly ON_CREATE_ROOM: string = \"OnCreateRoom\";\r\n    public static readonly ON_POP_CARD_MESSAGE: string = \"OnJoinGame\";\r\n    public static readonly ON_START_GAME_MESSAGE: string = \"OnStartGame\";\r\n    public static readonly ON_JOIN_GAME_MESSAGE: string = \"OnPopCard\";\r\n    public static readonly ON_SNAP_MESSAGE: string = \"OnPopCard\";\r\n\r\n    private static readonly ENPOINT: string = \"https://localhost:44378/game_notifications\";\r\n    private connection: signalR.HubConnection;\r\n    private token: ITokenResponse;\r\n    private connectTryCount: number = 0;\r\n\r\n    private _player: any = null;\r\n\r\n    get player(): any {\r\n        return this._player;\r\n    }\r\n\r\n    set player(player: any) {\r\n        this._player = player;\r\n        const eventType: string = this._player ? ConnectionManager.ON_PLAYER_LOGIN_EVENT :\r\n            ConnectionManager.ON_PLAYER_LOGOUT;\r\n        this.dispatch(eventType, this._player);\r\n    }\r\n\r\n    private client: JSO = new JSO({\r\n        providerID: \"snapGameOauth\",\r\n        client_id: \"snapGameApiDevSwagger\",\r\n        authorization: \"https://localhost:52365/connect/authorize\",\r\n        token: \"https://localhost:52365/connect/token\",\r\n        redirect_uri: \"http://localhost:7456\",\r\n        debug: true,\r\n        scopes: {\r\n            request: [\"snapgame\"],\r\n        },\r\n        response_type: \"token\",\r\n        request: {\r\n            // tslint:disable-next-line:max-line-length\r\n            nonce: \"636864884858396406.MWI4ZjNkYWItOGU1My00YmFiLTg1MTAtMWQzOTY2OTM4YzRkOGFhOGI1OGItODc0YS00NGEyLWI3NzgtYzU0YmJiMzk5NWY0\"\r\n        }\r\n    });\r\n\r\n    refresh(): Promise<any> {\r\n        return this.login().then(() => {\r\n            return this.connect().catch(e => {\r\n                cc.error(e);\r\n                throw e;\r\n            });\r\n        });\r\n    }\r\n\r\n    login(): Promise<any> {\r\n        this.client.callback();\r\n        cc.log(\"Trying to loggin\");\r\n        this.dispatch(ConnectionManager.ON_CHALLENGING, {});\r\n        return this.client.getToken()\r\n            .then((token) => {\r\n                this.token = token;\r\n                cc.log(\"I got the token: \", this.token);\r\n\r\n                const fetcher: Fetcher = new Fetcher(this.client);\r\n                const url: string = \"https://localhost:44378/api/Player/me\";\r\n                fetcher.fetch(url, {})\r\n                    .then((data) => {\r\n                        return data.json();\r\n                    })\r\n                    .then((data) => {\r\n                        cc.log(`Player ifno recieved from the server ${data}`);\r\n                        this.player = data;\r\n                    })\r\n                    .catch((err) => {\r\n                        cc.error(\"Error getting user data: \", err);\r\n                        throw err;\r\n                    });\r\n            })\r\n            .catch((err) => {\r\n                cc.error(\"Error from getToken: \", err);\r\n                throw err;\r\n            });\r\n    }\r\n\r\n    logout(): void {\r\n        this.client.wipeTokens();\r\n        this.player = null;\r\n    }\r\n\r\n    connect(): Promise<void> {\r\n        if (!this.connection) {\r\n            const builder: signalR.HubConnectionBuilder = new signalR.HubConnectionBuilder()\r\n                .configureLogging(signalR.LogLevel.Information)\r\n                .withUrl(ConnectionManager.ENPOINT, {\r\n                    accessTokenFactory: () => {\r\n                        return !this.token ? \"\" : this.token.access_token;\r\n                    }\r\n                });\r\n            this.connection = builder.build();\r\n            this.connection.onclose((err) => {\r\n                this.dispatch(ConnectionManager.ON_CONNECTION_CLOSED, err);\r\n                // this.connect();\r\n                // this.connectionStatusLbl.string = \"Disconnected\";\r\n                // this.reconnectBtn.node.getChildByName(\"Label\").getComponent(cc.Label).string = \"Reconnect\";\r\n                // cc.error(err);\r\n            });\r\n        }\r\n        if (this.connection.state === signalR.HubConnectionState.Connected) {\r\n            return new Promise<void>(() => {\r\n                cc.log(\"You are already connected\");\r\n                return;\r\n            });\r\n        }\r\n\r\n        cc.log(\"Connecting\");\r\n        this.dispatch(ConnectionManager.ON_CONNECTING, {});\r\n        this.connectTryCount++;\r\n        if (this.connectTryCount > 10) {\r\n            throw \"maxReconnectFailed\";\r\n        }\r\n        return this.connection.start().then(c => {\r\n            this.connectTryCount = 0;\r\n\r\n            this.connection\r\n                .on(ConnectionManager.CREATE_ROOM, (message) => {\r\n                    cc.log(`${ConnectionManager.CREATE_ROOM} received: ${message}`);\r\n                    this.dispatch(ConnectionManager.ON_CREATE_ROOM, message);\r\n                });\r\n            this.connection\r\n                .on(ConnectionManager.JOIN_GAME_MESSAGE, (message) => {\r\n                    cc.log(`${ConnectionManager.JOIN_GAME_MESSAGE} received: ${message}`);\r\n                    this.dispatch(ConnectionManager.ON_JOIN_GAME_MESSAGE, message);\r\n                });\r\n            this.connection\r\n                .on(ConnectionManager.START_GAME_MESSAGE, (message) => {\r\n                    cc.log(`${ConnectionManager.START_GAME_MESSAGE} received: ${message}`);\r\n                    this.dispatch(ConnectionManager.ON_START_GAME_MESSAGE, message);\r\n                });\r\n            this.connection\r\n                .on(ConnectionManager.POP_CARD_MESSAGE, (message) => {\r\n                    cc.log(`${ConnectionManager.POP_CARD_MESSAGE} received: ${message}`);\r\n                    this.dispatch(ConnectionManager.ON_POP_CARD_MESSAGE, message);\r\n                });\r\n            this.connection\r\n                .on(ConnectionManager.SNAP_MESSAGE, (message) => {\r\n                    cc.log(`${ConnectionManager.SNAP_MESSAGE} received: ${message}`);\r\n                    this.dispatch(ConnectionManager.ON_SNAP_MESSAGE, message);\r\n                });\r\n\r\n            this.dispatch(ConnectionManager.ON_CONNECTED, {});\r\n            cc.log(\"Connection stablished!\");\r\n        });\r\n\r\n    }\r\n\r\n    createRoom(): Promise<void> {\r\n        this.validateConnected();\r\n        return this.connection.send(ConnectionManager.CREATE_ROOM).then((data) => {\r\n            cc.log(data);\r\n        }).catch(e => {\r\n            cc.error(e);\r\n            throw e;\r\n        });\r\n    }\r\n\r\n    startGame(roomId: number): any {\r\n        this.validateConnected();\r\n        return this.connection.send(ConnectionManager.START_GAME_MESSAGE, roomId).then((data) => {\r\n            cc.log(`Message ${ConnectionManager.START_GAME_MESSAGE} sent`);\r\n        }).catch(err => {\r\n            cc.error(err);\r\n            throw err;\r\n        });\r\n    }\r\n    joinGame(roomId: number, isViewer: boolean = false): Promise<any> {\r\n        this.validateConnected();\r\n        return this.connection.send(ConnectionManager.JOIN_GAME_MESSAGE, roomId, isViewer)\r\n            .then((data) => {\r\n                cc.log(`Message ${ConnectionManager.JOIN_GAME_MESSAGE} sent`);\r\n            }).catch(err => {\r\n                cc.error(err);\r\n                throw err;\r\n            });\r\n    }\r\n    popCard(gameId: number): Promise<any> {\r\n        this.validateConnected();\r\n        return this.connection.send(ConnectionManager.POP_CARD_MESSAGE, gameId).then((data) => {\r\n            cc.log(`Message ${ConnectionManager.POP_CARD_MESSAGE} sent`);\r\n        }).catch(err => {\r\n            cc.error(err);\r\n            throw err;\r\n        });\r\n    }\r\n    snap(gameId: number): Promise<any> {\r\n        this.validateConnected();\r\n        return this.connection.send(ConnectionManager.SNAP_MESSAGE, gameId).then((data) => {\r\n            cc.log(`Message ${ConnectionManager.POP_CARD_MESSAGE} sent`);\r\n        }).catch(err => {\r\n            cc.error(err);\r\n            throw err;\r\n        });\r\n    }\r\n    private validateConnected(): void {\r\n        if (this.connection.state === signalR.HubConnectionState.Disconnected) {\r\n            cc.error(\"You should be connected to create a room\");\r\n            throw \"You are discconected\";\r\n        }\r\n        return;\r\n    }\r\n\r\n    private dispatch(type: string, data: any): void {\r\n        const e: cc.Event.EventCustom = new cc.Event.EventCustom(type, true);\r\n        e.target = this;\r\n        e.setUserData(data);\r\n        cc.director.dispatchEvent(e);\r\n        cc.systemEvent.dispatchEvent(e);\r\n    }\r\n}\r\n\r\nexport interface ITokenResponse {\r\n    access_token: string;\r\n    expires: number;\r\n    expires_in: number;\r\n    received: number;\r\n    scopes: [];\r\n    state: string;\r\n    token_type: string;\r\n}\r\nexport default ConnectionManager;"]}