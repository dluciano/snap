{"version":3,"sources":["..\\..\\..\\..\\..\\assets\\Script\\oauth/assets\\Script\\oauth\\SecurityManager.ts"],"names":[],"mappings":";;;;AAAA,YAAY,CAAC;;AACb,2BAAmC;AAInC;IAII,4BAAoB,YAA0B,EAClC,cAAsC;QADlD,iBACuD;QADnC,iBAAY,GAAZ,YAAY,CAAc;QAClC,mBAAc,GAAd,cAAc,CAAwB;QAmClD,WAAM,GAAG;YACL,IAAI,CAAC,KAAI,CAAC,MAAM,EAAE;gBACd,OAAO;aACV;YACD,KAAI,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC;YACzB,KAAI,CAAC,cAAc,CAAC,aAAa,GAAG,IAAI,CAAC;QAC7C,CAAC,CAAA;IAzCqD,CAAC;IAEjD,kCAAK,GAAX;uCAAe,OAAO;;;;;wBACZ,UAAU,GAAwB,IAAI,CAAC,cAAc,CAAC,kBAAkB,CAAC;wBAC/E,IAAI,CAAC,MAAM,GAAG,IAAI,SAAG,CAAC;4BAClB,UAAU,EAAE,UAAU,CAAC,UAAU;4BACjC,SAAS,EAAE,UAAU,CAAC,SAAS;4BAC/B,aAAa,EAAE,UAAU,CAAC,aAAa;4BACvC,KAAK,EAAE,UAAU,CAAC,KAAK;4BACvB,YAAY,EAAE,UAAU,CAAC,YAAY;4BACrC,KAAK,EAAE,IAAI;4BACX,MAAM,EAAE,UAAU,CAAC,MAAM;4BACzB,aAAa,EAAE,UAAU,CAAC,aAAa;4BACvC,OAAO,EAAE;gCACL,KAAK,EAAE,UAAU,CAAC,KAAK;6BAC1B;yBACJ,CAAC,CAAC;wBACH,qBAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAA;;wBAA5B,SAA4B,CAAC;wBAC7B,EAAE,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;wBACzB,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC;;;;wBAEjD,KAAA,IAAI,CAAC,cAAc,CAAA;wBAAgB,qBAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAA;;wBAA/D,GAAoB,YAAY,GAAG,SAA4B,CAAC;wBAChE,EAAE,CAAC,GAAG,CAAC,mBAAmB,EAAE,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;;;;wBAEnD,KAAA,IAAI,CAAC,cAAc,CAAA;wBAAiB,qBAAM,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,EAAA;4BAAzE,sBAAO,GAAoB,aAAa,GAAG,SAA8B,EAAC;;;wBAE1E,EAAE,CAAC,GAAG,CAAC,kCAAgC,OAAO,CAAC,CAAC;wBAChD,MAAM,OAAK,CAAC;;;;wBAGhB,EAAE,CAAC,KAAK,CAAC,uBAAuB,EAAE,OAAK,CAAC,CAAC;wBACzC,MAAM,OAAK,CAAC;;;;;KAEnB;IAUD,kCAAK,GAAL,UAAM,KAAkB,EAAE,IAAkB;QACxC,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,aAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC;YAC9D,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;IAClC,CAAC;IAEO,qCAAQ,GAAhB,UAAiB,IAAY,EAAE,IAAS;QACpC,IAAM,CAAC,GAAyB,IAAI,EAAE,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QACrE,CAAC,CAAC,MAAM,GAAG,IAAI,CAAC;QAChB,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QACpB,EAAE,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;IACpC,CAAC;IAzDsB,iCAAc,GAAW,eAAe,CAAC;IA0DpE,yBAAC;CA3DD,AA2DC,IAAA;AA3DY,gDAAkB;AA6D/B,kBAAe,kBAAkB,CAAC","file":"","sourceRoot":"..\\..\\..\\..\\..\\assets\\Script\\oauth","sourcesContent":["\"use strict\";\r\nimport { JSO, Fetcher } from \"jso\";\r\nimport { PlayerClient, IPlayer } from \"../api\";\r\nimport { IOAuthConfiguration, ISecurityManager, ISecurityConfiguration } from \"./IGameConfiguration\";\r\n\r\nexport class JsoSecurityManager implements ISecurityManager {\r\n    public static readonly ON_CHALLENGING: string = \"onChallenging\";\r\n    private client: JSO;\r\n\r\n    constructor(private playerClient: PlayerClient,\r\n        private securityConfig: ISecurityConfiguration) { }\r\n\r\n    async login(): Promise<IPlayer | null> {\r\n        const oautConfig: IOAuthConfiguration = this.securityConfig.oauthConfiguration;\r\n        this.client = new JSO({\r\n            providerID: oautConfig.providerID,\r\n            client_id: oautConfig.client_id,\r\n            authorization: oautConfig.authorization,\r\n            token: oautConfig.token,\r\n            redirect_uri: oautConfig.redirect_uri,\r\n            debug: true,\r\n            scopes: oautConfig.scopes,\r\n            response_type: oautConfig.response_type,\r\n            request: {\r\n                nonce: oautConfig.nonce\r\n            }\r\n        });\r\n        await this.client.callback();\r\n        cc.log(\"Loggin started\");\r\n        this.dispatch(JsoSecurityManager.ON_CHALLENGING, {});\r\n        try {\r\n            this.securityConfig.currentToken = await this.client.getToken();\r\n            cc.log(\"I got the token: \", this.securityConfig.currentToken);\r\n            try {\r\n                return this.securityConfig.currentPlayer = await this.playerClient.post();\r\n            } catch (error) {\r\n                cc.log(`Error recieving Player info: ${error}`);\r\n                throw error;\r\n            }\r\n        } catch (error) {\r\n            cc.error(\"Error from getToken: \", error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = (): Promise<void> => {\r\n        if (!this.client) {\r\n            return;\r\n        }\r\n        this.client.wipeTokens();\r\n        this.securityConfig.currentPlayer = null;\r\n    }\r\n\r\n    fetch(input: RequestInfo, init?: RequestInit): Promise<Response> {\r\n        return this.client ? new Fetcher(this.client).fetch(input, init) :\r\n            window.fetch(input, init);\r\n    }\r\n\r\n    private dispatch(type: string, data: any): void {\r\n        const e: cc.Event.EventCustom = new cc.Event.EventCustom(type, true);\r\n        e.target = this;\r\n        e.setUserData(data);\r\n        cc.systemEvent.dispatchEvent(e);\r\n    }\r\n}\r\n\r\nexport default JsoSecurityManager;"]}